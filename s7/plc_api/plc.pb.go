// Code generated by protoc-gen-go. DO NOT EDIT.
// source: plc.proto

package plc_api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type S7CpuInfo struct {
	ModuleTypeName       string   `protobuf:"bytes,1,opt,name=module_type_name,json=moduleTypeName,proto3" json:"module_type_name,omitempty"`
	SerialNumber         string   `protobuf:"bytes,2,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	AsName               string   `protobuf:"bytes,3,opt,name=as_name,json=asName,proto3" json:"as_name,omitempty"`
	Copyright            string   `protobuf:"bytes,4,opt,name=copyright,proto3" json:"copyright,omitempty"`
	ModuleName           string   `protobuf:"bytes,5,opt,name=module_name,json=moduleName,proto3" json:"module_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *S7CpuInfo) Reset()         { *m = S7CpuInfo{} }
func (m *S7CpuInfo) String() string { return proto.CompactTextString(m) }
func (*S7CpuInfo) ProtoMessage()    {}
func (*S7CpuInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0a6ab4644bfacb6, []int{0}
}

func (m *S7CpuInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_S7CpuInfo.Unmarshal(m, b)
}
func (m *S7CpuInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_S7CpuInfo.Marshal(b, m, deterministic)
}
func (m *S7CpuInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_S7CpuInfo.Merge(m, src)
}
func (m *S7CpuInfo) XXX_Size() int {
	return xxx_messageInfo_S7CpuInfo.Size(m)
}
func (m *S7CpuInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_S7CpuInfo.DiscardUnknown(m)
}

var xxx_messageInfo_S7CpuInfo proto.InternalMessageInfo

func (m *S7CpuInfo) GetModuleTypeName() string {
	if m != nil {
		return m.ModuleTypeName
	}
	return ""
}

func (m *S7CpuInfo) GetSerialNumber() string {
	if m != nil {
		return m.SerialNumber
	}
	return ""
}

func (m *S7CpuInfo) GetAsName() string {
	if m != nil {
		return m.AsName
	}
	return ""
}

func (m *S7CpuInfo) GetCopyright() string {
	if m != nil {
		return m.Copyright
	}
	return ""
}

func (m *S7CpuInfo) GetModuleName() string {
	if m != nil {
		return m.ModuleName
	}
	return ""
}

type Plc struct {
	Host                 string   `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Rack                 uint32   `protobuf:"varint,2,opt,name=rack,proto3" json:"rack,omitempty"`
	Slot                 uint32   `protobuf:"varint,3,opt,name=slot,proto3" json:"slot,omitempty"`
	Port                 uint32   `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Plc) Reset()         { *m = Plc{} }
func (m *Plc) String() string { return proto.CompactTextString(m) }
func (*Plc) ProtoMessage()    {}
func (*Plc) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0a6ab4644bfacb6, []int{1}
}

func (m *Plc) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Plc.Unmarshal(m, b)
}
func (m *Plc) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Plc.Marshal(b, m, deterministic)
}
func (m *Plc) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Plc.Merge(m, src)
}
func (m *Plc) XXX_Size() int {
	return xxx_messageInfo_Plc.Size(m)
}
func (m *Plc) XXX_DiscardUnknown() {
	xxx_messageInfo_Plc.DiscardUnknown(m)
}

var xxx_messageInfo_Plc proto.InternalMessageInfo

func (m *Plc) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *Plc) GetRack() uint32 {
	if m != nil {
		return m.Rack
	}
	return 0
}

func (m *Plc) GetSlot() uint32 {
	if m != nil {
		return m.Slot
	}
	return 0
}

func (m *Plc) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

type Tag struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Dt      string `protobuf:"bytes,2,opt,name=dt,proto3" json:"dt,omitempty"`
	// Types that are valid to be assigned to Value:
	//	*Tag_ValueBool
	//	*Tag_ValueInt32
	//	*Tag_ValueInt64
	//	*Tag_ValueFloat
	//	*Tag_ValueFloat64
	//	*Tag_ValueBytes
	//	*Tag_ValueString
	//	*Tag_ValueTimestamp
	//	*Tag_ValueDuration
	Value                isTag_Value `protobuf_oneof:"value"`
	Err                  string      `protobuf:"bytes,12,opt,name=err,proto3" json:"err,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Tag) Reset()         { *m = Tag{} }
func (m *Tag) String() string { return proto.CompactTextString(m) }
func (*Tag) ProtoMessage()    {}
func (*Tag) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0a6ab4644bfacb6, []int{2}
}

func (m *Tag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Tag.Unmarshal(m, b)
}
func (m *Tag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Tag.Marshal(b, m, deterministic)
}
func (m *Tag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tag.Merge(m, src)
}
func (m *Tag) XXX_Size() int {
	return xxx_messageInfo_Tag.Size(m)
}
func (m *Tag) XXX_DiscardUnknown() {
	xxx_messageInfo_Tag.DiscardUnknown(m)
}

var xxx_messageInfo_Tag proto.InternalMessageInfo

func (m *Tag) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Tag) GetDt() string {
	if m != nil {
		return m.Dt
	}
	return ""
}

type isTag_Value interface {
	isTag_Value()
}

type Tag_ValueBool struct {
	ValueBool bool `protobuf:"varint,3,opt,name=value_bool,json=valueBool,proto3,oneof"`
}

type Tag_ValueInt32 struct {
	ValueInt32 int32 `protobuf:"varint,4,opt,name=value_int32,json=valueInt32,proto3,oneof"`
}

type Tag_ValueInt64 struct {
	ValueInt64 int64 `protobuf:"varint,5,opt,name=value_int64,json=valueInt64,proto3,oneof"`
}

type Tag_ValueFloat struct {
	ValueFloat float32 `protobuf:"fixed32,6,opt,name=value_float,json=valueFloat,proto3,oneof"`
}

type Tag_ValueFloat64 struct {
	ValueFloat64 float64 `protobuf:"fixed64,7,opt,name=value_float64,json=valueFloat64,proto3,oneof"`
}

type Tag_ValueBytes struct {
	ValueBytes []byte `protobuf:"bytes,8,opt,name=value_bytes,json=valueBytes,proto3,oneof"`
}

type Tag_ValueString struct {
	ValueString string `protobuf:"bytes,9,opt,name=value_string,json=valueString,proto3,oneof"`
}

type Tag_ValueTimestamp struct {
	ValueTimestamp *timestamp.Timestamp `protobuf:"bytes,10,opt,name=value_timestamp,json=valueTimestamp,proto3,oneof"`
}

type Tag_ValueDuration struct {
	ValueDuration *duration.Duration `protobuf:"bytes,11,opt,name=value_duration,json=valueDuration,proto3,oneof"`
}

func (*Tag_ValueBool) isTag_Value() {}

func (*Tag_ValueInt32) isTag_Value() {}

func (*Tag_ValueInt64) isTag_Value() {}

func (*Tag_ValueFloat) isTag_Value() {}

func (*Tag_ValueFloat64) isTag_Value() {}

func (*Tag_ValueBytes) isTag_Value() {}

func (*Tag_ValueString) isTag_Value() {}

func (*Tag_ValueTimestamp) isTag_Value() {}

func (*Tag_ValueDuration) isTag_Value() {}

func (m *Tag) GetValue() isTag_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Tag) GetValueBool() bool {
	if x, ok := m.GetValue().(*Tag_ValueBool); ok {
		return x.ValueBool
	}
	return false
}

func (m *Tag) GetValueInt32() int32 {
	if x, ok := m.GetValue().(*Tag_ValueInt32); ok {
		return x.ValueInt32
	}
	return 0
}

func (m *Tag) GetValueInt64() int64 {
	if x, ok := m.GetValue().(*Tag_ValueInt64); ok {
		return x.ValueInt64
	}
	return 0
}

func (m *Tag) GetValueFloat() float32 {
	if x, ok := m.GetValue().(*Tag_ValueFloat); ok {
		return x.ValueFloat
	}
	return 0
}

func (m *Tag) GetValueFloat64() float64 {
	if x, ok := m.GetValue().(*Tag_ValueFloat64); ok {
		return x.ValueFloat64
	}
	return 0
}

func (m *Tag) GetValueBytes() []byte {
	if x, ok := m.GetValue().(*Tag_ValueBytes); ok {
		return x.ValueBytes
	}
	return nil
}

func (m *Tag) GetValueString() string {
	if x, ok := m.GetValue().(*Tag_ValueString); ok {
		return x.ValueString
	}
	return ""
}

func (m *Tag) GetValueTimestamp() *timestamp.Timestamp {
	if x, ok := m.GetValue().(*Tag_ValueTimestamp); ok {
		return x.ValueTimestamp
	}
	return nil
}

func (m *Tag) GetValueDuration() *duration.Duration {
	if x, ok := m.GetValue().(*Tag_ValueDuration); ok {
		return x.ValueDuration
	}
	return nil
}

func (m *Tag) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Tag) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Tag_ValueBool)(nil),
		(*Tag_ValueInt32)(nil),
		(*Tag_ValueInt64)(nil),
		(*Tag_ValueFloat)(nil),
		(*Tag_ValueFloat64)(nil),
		(*Tag_ValueBytes)(nil),
		(*Tag_ValueString)(nil),
		(*Tag_ValueTimestamp)(nil),
		(*Tag_ValueDuration)(nil),
	}
}

type RWResult struct {
	Tags                 []*Tag   `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RWResult) Reset()         { *m = RWResult{} }
func (m *RWResult) String() string { return proto.CompactTextString(m) }
func (*RWResult) ProtoMessage()    {}
func (*RWResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0a6ab4644bfacb6, []int{3}
}

func (m *RWResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RWResult.Unmarshal(m, b)
}
func (m *RWResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RWResult.Marshal(b, m, deterministic)
}
func (m *RWResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RWResult.Merge(m, src)
}
func (m *RWResult) XXX_Size() int {
	return xxx_messageInfo_RWResult.Size(m)
}
func (m *RWResult) XXX_DiscardUnknown() {
	xxx_messageInfo_RWResult.DiscardUnknown(m)
}

var xxx_messageInfo_RWResult proto.InternalMessageInfo

func (m *RWResult) GetTags() []*Tag {
	if m != nil {
		return m.Tags
	}
	return nil
}

type RWReq struct {
	Plc                  *Plc     `protobuf:"bytes,1,opt,name=plc,proto3" json:"plc,omitempty"`
	Tags                 []*Tag   `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RWReq) Reset()         { *m = RWReq{} }
func (m *RWReq) String() string { return proto.CompactTextString(m) }
func (*RWReq) ProtoMessage()    {}
func (*RWReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0a6ab4644bfacb6, []int{4}
}

func (m *RWReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RWReq.Unmarshal(m, b)
}
func (m *RWReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RWReq.Marshal(b, m, deterministic)
}
func (m *RWReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RWReq.Merge(m, src)
}
func (m *RWReq) XXX_Size() int {
	return xxx_messageInfo_RWReq.Size(m)
}
func (m *RWReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RWReq.DiscardUnknown(m)
}

var xxx_messageInfo_RWReq proto.InternalMessageInfo

func (m *RWReq) GetPlc() *Plc {
	if m != nil {
		return m.Plc
	}
	return nil
}

func (m *RWReq) GetTags() []*Tag {
	if m != nil {
		return m.Tags
	}
	return nil
}

func init() {
	proto.RegisterType((*S7CpuInfo)(nil), "plc_api.S7CpuInfo")
	proto.RegisterType((*Plc)(nil), "plc_api.Plc")
	proto.RegisterType((*Tag)(nil), "plc_api.Tag")
	proto.RegisterType((*RWResult)(nil), "plc_api.RWResult")
	proto.RegisterType((*RWReq)(nil), "plc_api.RWReq")
}

func init() { proto.RegisterFile("plc.proto", fileDescriptor_a0a6ab4644bfacb6) }

var fileDescriptor_a0a6ab4644bfacb6 = []byte{
	// 584 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xc7, 0xed, 0xb8, 0x69, 0xe2, 0xc9, 0x07, 0x65, 0x2f, 0x98, 0x08, 0xb5, 0xc6, 0x15, 0x92,
	0x0f, 0x28, 0xad, 0xd2, 0xaa, 0xdc, 0xc3, 0x57, 0x7a, 0xa9, 0xaa, 0x6d, 0x50, 0x8f, 0xd6, 0xc6,
	0xde, 0xba, 0x16, 0x9b, 0xac, 0xf1, 0xae, 0x91, 0xf2, 0x2e, 0x3c, 0x05, 0x0f, 0xc2, 0x33, 0xa1,
	0x9d, 0x4d, 0xdc, 0x04, 0x0e, 0x70, 0x9b, 0xfd, 0xcf, 0x6f, 0xfe, 0x9e, 0xf1, 0xce, 0x82, 0x5f,
	0x8a, 0x74, 0x5c, 0x56, 0x52, 0x4b, 0xd2, 0x29, 0x45, 0x9a, 0xb0, 0xb2, 0x18, 0x9d, 0xe4, 0x52,
	0xe6, 0x82, 0x9f, 0xa1, 0xbc, 0xa8, 0x1f, 0xce, 0x74, 0xb1, 0xe4, 0x4a, 0xb3, 0x65, 0x69, 0xc9,
	0xd1, 0xf1, 0x9f, 0x40, 0x56, 0x57, 0x4c, 0x17, 0x72, 0x65, 0xf3, 0xd1, 0x4f, 0x17, 0xfc, 0xbb,
	0x77, 0xef, 0xcb, 0xfa, 0x7a, 0xf5, 0x20, 0x49, 0x0c, 0x47, 0x4b, 0x99, 0xd5, 0x82, 0x27, 0x7a,
	0x5d, 0xf2, 0x64, 0xc5, 0x96, 0x3c, 0x70, 0x43, 0x37, 0xf6, 0xe9, 0xd0, 0xea, 0xf3, 0x75, 0xc9,
	0x6f, 0xd8, 0x92, 0x93, 0x53, 0x18, 0x28, 0x5e, 0x15, 0x4c, 0x24, 0xab, 0x7a, 0xb9, 0xe0, 0x55,
	0xd0, 0x42, 0xac, 0x6f, 0xc5, 0x1b, 0xd4, 0xc8, 0x0b, 0xe8, 0x30, 0x65, 0x5d, 0x3c, 0x4c, 0x1f,
	0x32, 0x85, 0xd5, 0xaf, 0xc0, 0x4f, 0x65, 0xb9, 0xae, 0x8a, 0xfc, 0x51, 0x07, 0x07, 0x98, 0x7a,
	0x12, 0xc8, 0x09, 0xf4, 0x36, 0x5d, 0x60, 0x69, 0x1b, 0xf3, 0x60, 0x25, 0x53, 0x1e, 0x7d, 0x01,
	0xef, 0x56, 0xa4, 0x84, 0xc0, 0xc1, 0xa3, 0x54, 0x7a, 0xd3, 0x21, 0xc6, 0x46, 0xab, 0x58, 0xfa,
	0x15, 0xdb, 0x19, 0x50, 0x8c, 0x8d, 0xa6, 0x84, 0xd4, 0xd8, 0xc3, 0x80, 0x62, 0x6c, 0xb4, 0x52,
	0x56, 0xf6, 0xe3, 0x03, 0x8a, 0x71, 0xf4, 0xcb, 0x03, 0x6f, 0xce, 0x72, 0x12, 0x40, 0x87, 0x65,
	0x59, 0xc5, 0x95, 0xda, 0x58, 0x6f, 0x8f, 0x64, 0x08, 0xad, 0x4c, 0x6f, 0x46, 0x6d, 0x65, 0xa6,
	0x53, 0xf8, 0xce, 0x44, 0xcd, 0x93, 0x85, 0x94, 0x02, 0xfd, 0xbb, 0x33, 0x87, 0xfa, 0xa8, 0x4d,
	0xa5, 0x14, 0xe4, 0x35, 0xf4, 0x2c, 0x50, 0xac, 0xf4, 0xc5, 0x04, 0xbf, 0xd6, 0x9e, 0x39, 0xd4,
	0x56, 0x5d, 0x1b, 0x6d, 0x0f, 0xb9, 0xba, 0xc4, 0x69, 0xbd, 0x5d, 0xe4, 0xea, 0xf2, 0x09, 0x79,
	0x10, 0x92, 0xe9, 0xe0, 0x30, 0x74, 0xe3, 0x56, 0x83, 0x7c, 0x32, 0x1a, 0x79, 0x03, 0x83, 0x1d,
	0xe4, 0xea, 0x32, 0xe8, 0x84, 0x6e, 0xec, 0xce, 0x1c, 0xda, 0x7f, 0x82, 0x76, 0x9d, 0x16, 0x6b,
	0xcd, 0x55, 0xd0, 0x0d, 0xdd, 0xb8, 0xdf, 0x38, 0x4d, 0x8d, 0x46, 0x4e, 0xc1, 0x96, 0x24, 0x4a,
	0x57, 0xc5, 0x2a, 0x0f, 0x7c, 0x33, 0xed, 0xcc, 0xa1, 0xb6, 0xf0, 0x0e, 0x45, 0xf2, 0x11, 0x9e,
	0x59, 0xa8, 0xd9, 0xb7, 0x00, 0x42, 0x37, 0xee, 0x4d, 0x46, 0x63, 0xbb, 0x70, 0xe3, 0xed, 0xc2,
	0x8d, 0xe7, 0x5b, 0x62, 0xe6, 0xd0, 0x21, 0x16, 0x35, 0x0a, 0x99, 0x82, 0x55, 0x92, 0xed, 0x56,
	0x06, 0x3d, 0x74, 0x79, 0xf9, 0x97, 0xcb, 0x87, 0x0d, 0x30, 0x73, 0xa8, 0x1d, 0x74, 0x2b, 0x90,
	0x23, 0xf0, 0x78, 0x55, 0x05, 0x7d, 0xbc, 0x14, 0x13, 0x4e, 0x3b, 0xd0, 0x46, 0x24, 0x7a, 0x0b,
	0x5d, 0x7a, 0x4f, 0xb9, 0xaa, 0x85, 0x26, 0x21, 0x1c, 0x68, 0x96, 0xab, 0xa0, 0x15, 0x7a, 0x71,
	0x6f, 0xd2, 0x1f, 0x6f, 0x5e, 0xd0, 0x78, 0xce, 0x72, 0x8a, 0x99, 0xe8, 0x1a, 0xda, 0x86, 0xfe,
	0x46, 0x8e, 0xc1, 0x2b, 0x45, 0x8a, 0x77, 0xbf, 0x4b, 0xde, 0x8a, 0x94, 0x9a, 0xc4, 0xbf, 0xad,
	0x26, 0x3f, 0x5c, 0x68, 0x1b, 0xfc, 0x9e, 0x9c, 0x03, 0x7c, 0xe6, 0x7a, 0xfb, 0xbe, 0xf6, 0xcc,
	0x46, 0xa4, 0x39, 0x35, 0x2f, 0x30, 0x72, 0xc8, 0x19, 0x74, 0x29, 0x67, 0xd9, 0x9c, 0xe5, 0x8a,
	0x0c, 0x1b, 0x02, 0x3b, 0x1b, 0x3d, 0xdf, 0x3b, 0x9b, 0xb9, 0x22, 0x87, 0x9c, 0x83, 0x7f, 0x5f,
	0x15, 0x9a, 0xff, 0x77, 0xc5, 0xe2, 0x10, 0x7f, 0xeb, 0xc5, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xd5, 0x53, 0x78, 0x8e, 0x52, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PlcRWClient is the client API for PlcRW service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PlcRWClient interface {
	GetCpuInfo(ctx context.Context, in *Plc, opts ...grpc.CallOption) (*S7CpuInfo, error)
	ReadTags(ctx context.Context, in *RWReq, opts ...grpc.CallOption) (*RWResult, error)
	WriteTags(ctx context.Context, in *RWReq, opts ...grpc.CallOption) (*RWResult, error)
}

type plcRWClient struct {
	cc *grpc.ClientConn
}

func NewPlcRWClient(cc *grpc.ClientConn) PlcRWClient {
	return &plcRWClient{cc}
}

func (c *plcRWClient) GetCpuInfo(ctx context.Context, in *Plc, opts ...grpc.CallOption) (*S7CpuInfo, error) {
	out := new(S7CpuInfo)
	err := c.cc.Invoke(ctx, "/plc_api.PlcRW/GetCpuInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plcRWClient) ReadTags(ctx context.Context, in *RWReq, opts ...grpc.CallOption) (*RWResult, error) {
	out := new(RWResult)
	err := c.cc.Invoke(ctx, "/plc_api.PlcRW/ReadTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *plcRWClient) WriteTags(ctx context.Context, in *RWReq, opts ...grpc.CallOption) (*RWResult, error) {
	out := new(RWResult)
	err := c.cc.Invoke(ctx, "/plc_api.PlcRW/WriteTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlcRWServer is the server API for PlcRW service.
type PlcRWServer interface {
	GetCpuInfo(context.Context, *Plc) (*S7CpuInfo, error)
	ReadTags(context.Context, *RWReq) (*RWResult, error)
	WriteTags(context.Context, *RWReq) (*RWResult, error)
}

// UnimplementedPlcRWServer can be embedded to have forward compatible implementations.
type UnimplementedPlcRWServer struct {
}

func (*UnimplementedPlcRWServer) GetCpuInfo(ctx context.Context, req *Plc) (*S7CpuInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCpuInfo not implemented")
}
func (*UnimplementedPlcRWServer) ReadTags(ctx context.Context, req *RWReq) (*RWResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadTags not implemented")
}
func (*UnimplementedPlcRWServer) WriteTags(ctx context.Context, req *RWReq) (*RWResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteTags not implemented")
}

func RegisterPlcRWServer(s *grpc.Server, srv PlcRWServer) {
	s.RegisterService(&_PlcRW_serviceDesc, srv)
}

func _PlcRW_GetCpuInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Plc)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlcRWServer).GetCpuInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plc_api.PlcRW/GetCpuInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlcRWServer).GetCpuInfo(ctx, req.(*Plc))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlcRW_ReadTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RWReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlcRWServer).ReadTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plc_api.PlcRW/ReadTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlcRWServer).ReadTags(ctx, req.(*RWReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlcRW_WriteTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RWReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlcRWServer).WriteTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plc_api.PlcRW/WriteTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlcRWServer).WriteTags(ctx, req.(*RWReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _PlcRW_serviceDesc = grpc.ServiceDesc{
	ServiceName: "plc_api.PlcRW",
	HandlerType: (*PlcRWServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCpuInfo",
			Handler:    _PlcRW_GetCpuInfo_Handler,
		},
		{
			MethodName: "ReadTags",
			Handler:    _PlcRW_ReadTags_Handler,
		},
		{
			MethodName: "WriteTags",
			Handler:    _PlcRW_WriteTags_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plc.proto",
}
